{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, forwardRef, Component, Input, Output, NgModule } from '@angular/core';\nimport * as i2 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport { NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { Subject } from 'rxjs';\nfunction SortableComponent_div_1_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r5 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 4);\n    i0.ɵɵlistener(\"dragover\", function SortableComponent_div_1_Template_div_dragover_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r4 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r4.onItemDragover($event, 0));\n    })(\"dragenter\", function SortableComponent_div_1_Template_div_dragenter_0_listener($event) {\n      i0.ɵɵrestoreView(_r5);\n      const ctx_r6 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r6.cancelEvent($event));\n    });\n    i0.ɵɵtext(1);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const ctx_r0 = i0.ɵɵnextContext();\n    i0.ɵɵproperty(\"ngClass\", ctx_r0.placeholderClass)(\"ngStyle\", ctx_r0.placeholderStyle);\n    i0.ɵɵadvance(1);\n    i0.ɵɵtextInterpolate(ctx_r0.placeholderItem);\n  }\n}\nfunction SortableComponent_div_2_ng_template_1_Template(rf, ctx) {}\nconst _c0 = function (a0, a1) {\n  return [a0, a1];\n};\nconst _c1 = function (a0, a1) {\n  return {\n    item: a0,\n    index: a1\n  };\n};\nfunction SortableComponent_div_2_Template(rf, ctx) {\n  if (rf & 1) {\n    const _r11 = i0.ɵɵgetCurrentView();\n    i0.ɵɵelementStart(0, \"div\", 5);\n    i0.ɵɵlistener(\"dragstart\", function SortableComponent_div_2_Template_div_dragstart_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const item_r7 = restoredCtx.$implicit;\n      const i_r8 = restoredCtx.index;\n      const ctx_r10 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r10.onItemDragstart($event, item_r7, i_r8));\n    })(\"dragend\", function SortableComponent_div_2_Template_div_dragend_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r12 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r12.resetActiveItem($event));\n    })(\"dragover\", function SortableComponent_div_2_Template_div_dragover_0_listener($event) {\n      const restoredCtx = i0.ɵɵrestoreView(_r11);\n      const i_r8 = restoredCtx.index;\n      const ctx_r13 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r13.onItemDragover($event, i_r8));\n    })(\"dragenter\", function SortableComponent_div_2_Template_div_dragenter_0_listener($event) {\n      i0.ɵɵrestoreView(_r11);\n      const ctx_r14 = i0.ɵɵnextContext();\n      return i0.ɵɵresetView(ctx_r14.cancelEvent($event));\n    });\n    i0.ɵɵtemplate(1, SortableComponent_div_2_ng_template_1_Template, 0, 0, \"ng-template\", 6);\n    i0.ɵɵelementEnd();\n  }\n  if (rf & 2) {\n    const item_r7 = ctx.$implicit;\n    const i_r8 = ctx.index;\n    const ctx_r1 = i0.ɵɵnextContext();\n    const _r2 = i0.ɵɵreference(4);\n    i0.ɵɵproperty(\"ngClass\", i0.ɵɵpureFunction2(5, _c0, ctx_r1.itemClass, i_r8 === ctx_r1.activeItem ? ctx_r1.itemActiveClass : \"\"))(\"ngStyle\", ctx_r1.getItemStyle(i_r8 === ctx_r1.activeItem));\n    i0.ɵɵattribute(\"aria-grabbed\", i_r8 === ctx_r1.activeItem);\n    i0.ɵɵadvance(1);\n    i0.ɵɵproperty(\"ngTemplateOutlet\", ctx_r1.itemTemplate || _r2)(\"ngTemplateOutletContext\", i0.ɵɵpureFunction2(8, _c1, item_r7, i_r8));\n  }\n}\nfunction SortableComponent_ng_template_3_Template(rf, ctx) {\n  if (rf & 1) {\n    i0.ɵɵtext(0);\n  }\n  if (rf & 2) {\n    const item_r15 = ctx.item;\n    i0.ɵɵtextInterpolate(item_r15.value);\n  }\n}\nlet DraggableItemService = /*#__PURE__*/(() => {\n  class DraggableItemService {\n    constructor() {\n      this.onCapture = new Subject();\n    }\n    dragStart(item) {\n      this.draggableItem = item;\n    }\n    getItem() {\n      return this.draggableItem;\n    }\n    captureItem(overZoneIndex, newIndex) {\n      if (this.draggableItem && this.draggableItem.overZoneIndex !== overZoneIndex) {\n        this.draggableItem.lastZoneIndex = this.draggableItem.overZoneIndex;\n        this.draggableItem.overZoneIndex = overZoneIndex;\n        this.onCapture.next(this.draggableItem);\n        this.draggableItem = Object.assign({}, this.draggableItem, {\n          overZoneIndex,\n          i: newIndex\n        });\n      }\n      return this.draggableItem;\n    }\n    onCaptureItem() {\n      return this.onCapture;\n    }\n  }\n  DraggableItemService.ɵfac = function DraggableItemService_Factory(t) {\n    return new (t || DraggableItemService)();\n  };\n  DraggableItemService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n    token: DraggableItemService,\n    factory: DraggableItemService.ɵfac,\n    providedIn: 'platform'\n  });\n  return DraggableItemService;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SortableComponent = /*#__PURE__*/(() => {\n  class SortableComponent {\n    constructor(transfer) {\n      /** class name for items wrapper */\n      this.wrapperClass = '';\n      /** style object for items wrapper */\n      this.wrapperStyle = {};\n      /** class name for item */\n      this.itemClass = '';\n      /** style object for item */\n      this.itemStyle = {};\n      /** class name for active item */\n      this.itemActiveClass = '';\n      /** style object for active item */\n      this.itemActiveStyle = {};\n      /** class name for placeholder */\n      this.placeholderClass = '';\n      /** style object for placeholder */\n      this.placeholderStyle = {};\n      /** placeholder item which will be shown if collection is empty */\n      this.placeholderItem = '';\n      /** fired on array change (reordering, insert, remove), same as <code>ngModelChange</code>.\n       *  Returns new items collection as a payload.\n       */\n      this.onChange = new EventEmitter();\n      this.showPlaceholder = false;\n      this.activeItem = -1;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.onTouched = Function.prototype;\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      this.onChanged = Function.prototype;\n      this._items = [];\n      this.transfer = transfer;\n      this.currentZoneIndex = SortableComponent.globalZoneIndex++;\n      this.transfer.onCaptureItem().subscribe(item => this.onDrop(item));\n    }\n    get items() {\n      return this._items;\n    }\n    set items(value) {\n      this._items = value;\n      const out = this.items.map(x => x.initData);\n      this.onChanged(out);\n      this.onChange.emit(out);\n    }\n    onItemDragstart(event, item, i) {\n      this.initDragstartEvent(event);\n      this.onTouched();\n      this.transfer.dragStart({\n        event,\n        item,\n        i,\n        initialIndex: i,\n        lastZoneIndex: this.currentZoneIndex,\n        overZoneIndex: this.currentZoneIndex\n      });\n    }\n    onItemDragover(event, i) {\n      if (!this.transfer.getItem()) {\n        return;\n      }\n      event.preventDefault();\n      const dragItem = this.transfer.captureItem(this.currentZoneIndex, this.items.length);\n      // eslint-disable-next-line @typescript-eslint/no-explicit-any\n      let newArray = [];\n      if (!dragItem) {\n        return;\n      }\n      if (!this.items.length) {\n        newArray = [dragItem.item];\n      } else if (dragItem.i > i) {\n        newArray = [...this.items.slice(0, i), dragItem.item, ...this.items.slice(i, dragItem.i), ...this.items.slice(dragItem.i + 1)];\n      } else {\n        // this.draggedItem.i < i\n        newArray = [...this.items.slice(0, dragItem.i), ...this.items.slice(dragItem.i + 1, i + 1), dragItem.item, ...this.items.slice(i + 1)];\n      }\n      this.items = newArray;\n      dragItem.i = i;\n      this.activeItem = i;\n      this.updatePlaceholderState();\n    }\n    cancelEvent(event) {\n      if (!this.transfer.getItem() || !event) {\n        return;\n      }\n      event.preventDefault();\n    }\n    onDrop(item) {\n      if (item && item.overZoneIndex !== this.currentZoneIndex && item.lastZoneIndex === this.currentZoneIndex) {\n        this.items = this.items.filter((x, i) => i !== item.i);\n        this.updatePlaceholderState();\n      }\n      this.resetActiveItem();\n    }\n    resetActiveItem(event) {\n      this.cancelEvent(event);\n      this.activeItem = -1;\n    }\n    registerOnChange(callback) {\n      this.onChanged = callback;\n    }\n    registerOnTouched(callback) {\n      this.onTouched = callback;\n    }\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    writeValue(value) {\n      if (value) {\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        this.items = value.map((x, i) => ({\n          id: i,\n          initData: x,\n          value: this.fieldName ? x[this.fieldName] : x\n        }));\n      } else {\n        this.items = [];\n      }\n      this.updatePlaceholderState();\n    }\n    updatePlaceholderState() {\n      this.showPlaceholder = !this._items.length;\n    }\n    getItemStyle(isActive) {\n      return isActive ? Object.assign({}, this.itemStyle, this.itemActiveStyle) : this.itemStyle;\n    }\n    initDragstartEvent(event) {\n      // it is necessary for mozilla\n      // data type should be 'Text' instead of 'text/plain' to keep compatibility\n      // with IE\n      event.dataTransfer?.setData('Text', 'placeholder');\n    }\n  }\n  SortableComponent.globalZoneIndex = 0;\n  SortableComponent.ɵfac = function SortableComponent_Factory(t) {\n    return new (t || SortableComponent)(i0.ɵɵdirectiveInject(DraggableItemService));\n  };\n  SortableComponent.ɵcmp = /* @__PURE__ */i0.ɵɵdefineComponent({\n    type: SortableComponent,\n    selectors: [[\"bs-sortable\"]],\n    inputs: {\n      fieldName: \"fieldName\",\n      wrapperClass: \"wrapperClass\",\n      wrapperStyle: \"wrapperStyle\",\n      itemClass: \"itemClass\",\n      itemStyle: \"itemStyle\",\n      itemActiveClass: \"itemActiveClass\",\n      itemActiveStyle: \"itemActiveStyle\",\n      placeholderClass: \"placeholderClass\",\n      placeholderStyle: \"placeholderStyle\",\n      placeholderItem: \"placeholderItem\",\n      itemTemplate: \"itemTemplate\"\n    },\n    outputs: {\n      onChange: \"onChange\"\n    },\n    exportAs: [\"bs-sortable\"],\n    features: [i0.ɵɵProvidersFeature([{\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => SortableComponent),\n      multi: true\n    }])],\n    decls: 5,\n    vars: 4,\n    consts: [[3, \"ngClass\", \"ngStyle\", \"dragover\", \"dragenter\", \"drop\", \"mouseleave\"], [3, \"ngClass\", \"ngStyle\", \"dragover\", \"dragenter\", 4, \"ngIf\"], [\"draggable\", \"true\", \"aria-dropeffect\", \"move\", 3, \"ngClass\", \"ngStyle\", \"dragstart\", \"dragend\", \"dragover\", \"dragenter\", 4, \"ngFor\", \"ngForOf\"], [\"defItemTemplate\", \"\"], [3, \"ngClass\", \"ngStyle\", \"dragover\", \"dragenter\"], [\"draggable\", \"true\", \"aria-dropeffect\", \"move\", 3, \"ngClass\", \"ngStyle\", \"dragstart\", \"dragend\", \"dragover\", \"dragenter\"], [3, \"ngTemplateOutlet\", \"ngTemplateOutletContext\"]],\n    template: function SortableComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"div\", 0);\n        i0.ɵɵlistener(\"dragover\", function SortableComponent_Template_div_dragover_0_listener($event) {\n          return ctx.cancelEvent($event);\n        })(\"dragenter\", function SortableComponent_Template_div_dragenter_0_listener($event) {\n          return ctx.cancelEvent($event);\n        })(\"drop\", function SortableComponent_Template_div_drop_0_listener($event) {\n          return ctx.resetActiveItem($event);\n        })(\"mouseleave\", function SortableComponent_Template_div_mouseleave_0_listener($event) {\n          return ctx.resetActiveItem($event);\n        });\n        i0.ɵɵtemplate(1, SortableComponent_div_1_Template, 2, 3, \"div\", 1);\n        i0.ɵɵtemplate(2, SortableComponent_div_2_Template, 2, 11, \"div\", 2);\n        i0.ɵɵelementEnd();\n        i0.ɵɵtemplate(3, SortableComponent_ng_template_3_Template, 1, 1, \"ng-template\", null, 3, i0.ɵɵtemplateRefExtractor);\n      }\n      if (rf & 2) {\n        i0.ɵɵproperty(\"ngClass\", ctx.wrapperClass)(\"ngStyle\", ctx.wrapperStyle);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngIf\", ctx.showPlaceholder);\n        i0.ɵɵadvance(1);\n        i0.ɵɵproperty(\"ngForOf\", ctx.items);\n      }\n    },\n    dependencies: [i2.NgClass, i2.NgForOf, i2.NgIf, i2.NgTemplateOutlet, i2.NgStyle],\n    encapsulation: 2\n  });\n  return SortableComponent;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\nlet SortableModule = /*#__PURE__*/(() => {\n  class SortableModule {\n    static forRoot() {\n      return {\n        ngModule: SortableModule,\n        providers: [DraggableItemService]\n      };\n    }\n  }\n  SortableModule.ɵfac = function SortableModule_Factory(t) {\n    return new (t || SortableModule)();\n  };\n  SortableModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n    type: SortableModule\n  });\n  SortableModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n    imports: [CommonModule]\n  });\n  return SortableModule;\n})();\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && void 0;\n})();\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { DraggableItemService, SortableComponent, SortableModule };\n//# sourceMappingURL=ngx-bootstrap-sortable.mjs.map","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}